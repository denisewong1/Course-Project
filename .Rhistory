abline(h=mean(algae$NH4,na.rm=T),lty=1)
abline(h=mean(algae$NH4,na.rm=T)+sd(algae$NH4,na.rm=T),lty=2)
abline(h=median(algae$NH4,na.rm=T),lty=3)
identify(algae$NH4)
plot(algae$NH4, xlab = "")
clicked.lines <- identify(algae$NH4)
clicked.lines
algae[clicked.lines, ]
algae[algae$NH4 > 19000, ]
algae[!is.na(algae$NH4) & algae$NH4 > 19000,]
library(lattice)
library()
bwplot(size ~ a1, data=algae, ylab='River Size',xlab='Algal A1')
x <- c(1:100)
bwplot(size ~ a1, data=x, ylab='River Size',xlab='Algal A1')
x <- c(1:100,2,3)
x
x
x <- c(1:100,3,3)
x
library(Hmisc)
bwplot(size ~ a1, data=algae,panel=panel.bpplot,
probs=seq(.01,.49,by=.01), datadensity=TRUE,
ylab='River Size',xlab='Algal A1')
library(Hmisc)
bwplot(size ~ a1, data=algae,panel=panel.bpplot,
probs=seq(.01,.49,by=.01), datadensity=TRUE,
ylab='River Size',xlab='Algal A1')
library(Hmisc)
install.packages('Hmisc')
library(Hmisc)
bwplot(size ~ a1, data=algae,panel=panel.bpplot,
probs=seq(.01,.49,by=.01), datadensity=TRUE,
ylab='River Size',xlab='Algal A1')
bwplot(size ~ a1, data=algae,panel=panel.bpplot,
probs=seq(.01,.49,by=.01), datadensity=TRUE,
ylab='River Size',xlab='Algal A1')
bwplot(size ~ a1, data=algae,panel=panel.bpplot,
probs=seq(.01,.49,by=.01), datadensity=TRUE,
ylab='River Size',xlab='Algal A1')
minO2 <- equal.count(na.omit(algae$mnO2),
number=4,overlap=1/5)
mino2
minO2
stripplot(season ~ a3|minO2,
data=algae[!is.na(algae$mnO2),])
minO2
stripplot(season ~ a3,
data=algae[!is.na(algae$mnO2),])
stripplot(season ~ a3|minO2,
data=algae[!is.na(algae$mnO2),])
stripplot(season ~ minO2,
data=algae[!is.na(algae$mnO2),])
stripplot(season ~ a3,
data=algae[!is.na(algae$mnO2),])
stripplot(season ~ minO2,
data=algae[!is.na(algae$mnO2),])
stripplot(season ~ a3|minO2,
data=algae[!is.na(algae$mnO2),])
algae[!complete.cases(algae),]
nrow(algae[!complete.cases(algae),])
nrow(x)
nrow(algae)
nrow(algae[!complete.cases(algae),])
nrow(algae[complete.cases(algae),])
apply(algae, 1, function(x) sum(is.na(x)))
apply(algae, 1, sum(is.na(x)))
apply(algae, 1, function(x))
apply(algae, 1, function(x)
)
function(x) sum(is.na(x)
)
function(x) sum(is.na(x))
algae
dim (x)''
dim (x)
dim (algae)
x <- 1:12 ; dim(x) <- c(3,4)
x
x <- 1:12 ; dim(x) <- c(3,4)
x
apply(algae, 2, sum(is.na(x)))
apply(algae, 2, function(x) sum(is.na(x)))
apply(algae, 1, function(x) sum(is.na(x)))
apply(algae, 3, function(x) sum(is.na(x)))
data(algae)
manyNAs(algae, 0.2)
linbrary (algae)
library (algae)
data(algae)
data()
data (dmWR)
library(DMwR)
data()
data(algae)
algae
data(apple)
manyNAs(algae, 0.2)
manyNAs(algae, 0.5)
manyNAs(algae, 0.1)
manyNAs(algae, 0.01)
algae
library (algae)
data (algae)
library(DMwR)
library (algae)
data (algae)
algae
library (algae)
data (algae)
algaw
algae
cor(algae[, 4:18], use = "complete.obs")
symnum(cor(algae[,4:18],use="complete.obs"))
manyNAs(algae, 0.1)
apply(algae, 1, function(x) sum(is.na(x)))
nrow(algae[!complete.cases(algae),])
cor(algae[, 4:18], use = "complete.obs")
nrow(algae[!complete.cases(algae),])
nrow(algae[!complete.cases(algae),])
symnum(cor(algae[,4:18],use="complete.obs"))
algae <- algae[-manyNAs(algae), ]
symnum(cor(algae[,4:18],use="complete.obs"))
nrow(algae[!complete.cases(algae),])
nrow(algae[!complete.cases(algae(,4)),])
nrow(algae[!complete.cases(algae),])
algae[-manyNAs(algae), ]
stripplot(season ~ a3|minO2,
data=algae[!is.na(algae
)
)))
data (algae)
algae <- algae[-manyNAs(algae), ]
lm(PO4 ~ oPO4, data = algae)
stripplot(season ~ a3|minO2,
data=alga
)))))
algae[!is.na(algae$mnO2),]
algae[is.na(algae$mnO2),]
algae[is.na(algae$PO4),]
algae[is.na(algae$PO4),PO$]
algae[is.na(algae$PO4),PO4]
algae[is.na(algae$PO4),Po4]
algae[is.na(algae$PO4),"PO4"]
algae[is.na(algae$PO4),]
algae[is.na(algae$PO4),"PO4"]
algae[is.na(algae$PO4),"Po4"]
algae[is.na(algae$PO4),"Po4v"]
algae[is.na(algae$PO4),2]
algae[is.na(algae$PO4),]
algae[is.na(algae$PO4),"PO4"]
histogram(~mxPH | season, data = algae)
algae$season <- factor(algae$season,levels=c('spring','summer','autumn','winter'))
histogram(~mxPH | season, data = algae)
histogram(~mxPH | size, data = algae)histogram(~mxPH | season, data = algae)
histogram(~mxPH | season, data = algae)
algae
histogram(~mxPH | size, data = algae)
histogram(~mxPH | size * speed, data = algae)
stripplot(size ~ mxPH | speed, data = algae, jitter = T)
histogram(~mxPH | size * speed, data = algae)
stripplot(size ~ mxPH | speed, data = algae, jitter = T)
data (algae)
algae <- algae[-manyNAs(algae), ]
algae <- knnImputation(algae,k=10,meth='median')
stripplot(size ~ mxPH | speed, data = algae, jitter = T)
data (algae)
algae <- algae[-manyNAs(algae), ]
clean.algae <- knnImputation(algae, k = 10)
lm.a1 <- lm(a1 ~ ., data = clean.algae[, 1:12])
lm.a1 <- lm(a1 âˆ¼ mxPH + NH4, data = clean.algae[, 1:12])
View(algae)
View(algae)
lm.a1 <- lm(a1 ~ ., data = clean.algae[, 1:12])
summary(algae)
find.package("devtools")
install.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
find_rtools()
library(devtools)
find_rtools()
find_rtools()
find.package("devtools")
library(devtools)
find.package("devtools")
find_rtools()
con <- url("https://www.facebook.com/","r")
con
x <-readline (con,10)
x <-readline (con)
x
x
readline (con)
readline (con)
x <-readlines (con)
x <-readLines (con)
con <- url("http://langster1980.blogspot.com/2014/10/elbert-v2-fpga-tutorial.html","r")
x <-readLines (con)
head(x)
x
con <- url("http://langster1980.blogspot.com/2014/10/elbert-v2-fpga-tutorial.html","w")
x<-list(foo=1:4,bar=6)
x
x[1]
x[foo]
x["foo"]
?abline
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
head(state)
head(state.x77)
head(lattice)
head(state.region)
xyplot(Life.Exp ~ Income | region, data = state)
library(datasets)
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
c<-norm(10)
x<-rnorm(10)
g<-gl(2,5,labels=c("male","female"))
g
x[g==male]
x[g=="male"]
x[1:5]
library (ggplot)
library (ggplot2)
install.packages("ggplot2")
libarary (ggplot2)
library (ggplot2)
str(mmc)
str(maac)
str(maacs)
seq(0,1,length=4)
x<-1:100
y<-quantile(x,seq(0,1,length=4))
y
y<-cut(x,y)
y
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month
)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='hassanelahi', token='3267C9279BC2F6C49688775D79BEF707', secret='Sp67zbUwgi+/Uv8p9IYtVEaVfhhVJD4I3QRU2UyT')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
setwd("D:\\Coursera\\Reproducible Research\\RepData_PeerAssessment2")
storm <- read.csv(repdata-data-StormData.csv)
storm <- read.csv(repdata_data_StormData.csv)
storm <- read.csv(repdata_data_StormData.csv)
storm <- read.csv("repdata-data-StormData.csv")
library(ggplot2)
library(gridExtra)
install.packages("gridExtra")
length(unique(storm$EVTYPE))
# translate all letters to lowercase
event_types <- tolower(storm$EVTYPE)
# replace all punct. characters with a space
event_types <- gsub("[[:blank:][:punct:]+]", " ", event_types)
length(unique(event_types))
# update the data frame
storm$EVTYPE <- event_types
library(plyr)
casualties <- ddply(storm, .(EVTYPE), summarize,
fatalities = sum(FATALITIES),
injuries = sum(INJURIES))
# Find events that caused most death and injury
fatal_events <- head(casualties[order(casualties$fatalities, decreasing = T), ], 10)
injury_events <- head(casualties[order(casualties$injuries, decreasing = T), ], 10)
fatal_events[, c("EVTYPE", "fatalities")]
injury_events[, c("EVTYPE", "injuries")]
exp_transform <- function(e) {
# h -> hundred, k -> thousand, m -> million, b -> billion
if (e %in% c('h', 'H'))
return(2)
else if (e %in% c('k', 'K'))
return(3)
else if (e %in% c('m', 'M'))
return(6)
else if (e %in% c('b', 'B'))
return(9)
else if (!is.na(as.numeric(e))) # if a digit
return(as.numeric(e))
else if (e %in% c('', '-', '?', '+'))
return(0)
else {
stop("Invalid exponent value.")
}
}
prop_dmg_exp <- sapply(storm$PROPDMGEXP, FUN=exp_transform)
storm$prop_dmg <- storm$PROPDMG * (10 ** prop_dmg_exp)
crop_dmg_exp <- sapply(storm$CROPDMGEXP, FUN=exp_transform)
storm$crop_dmg <- storm$CROPDMG * (10 ** crop_dmg_exp)
# Compute the economic loss by event type
library(plyr)
econ_loss <- ddply(storm, .(EVTYPE), summarize,
prop_dmg = sum(prop_dmg),
crop_dmg = sum(crop_dmg))
# filter out events that caused no economic loss
econ_loss <- econ_loss[(econ_loss$prop_dmg > 0 | econ_loss$crop_dmg > 0), ]
prop_dmg_events <- head(econ_loss[order(econ_loss$prop_dmg, decreasing = T), ], 10)
crop_dmg_events <- head(econ_loss[order(econ_loss$crop_dmg, decreasing = T), ], 10)
prop_dmg_events[, c("EVTYPE", "prop_dmg")]
crop_dmg_events[, c("EVTYPE", "crop_dmg")]
library(ggplot2)
library(gridExtra)
# Set the levels in order
p1 <- ggplot(data=fatal_events,
aes(x=reorder(EVTYPE, fatalities), y=fatalities, fill=fatalities)) +
geom_bar(stat="identity") +
coord_flip() +
ylab("Total number of fatalities") +
xlab("Event type") +
theme(legend.position="none")
p2 <- ggplot(data=injury_events,
aes(x=reorder(EVTYPE, injuries), y=injuries, fill=injuries)) +
geom_bar(stat="identity") +
coord_flip() +
ylab("Total number of injuries") +
xlab("Event type") +
theme(legend.position="none")
grid.arrange(p1, p2, main="Top deadly weather events in the US (1950-2011)")
grid.arrange(p1, p2, main="Top deadly weather events in the US (1950-2011)")
library(ggplot2)
library(gridExtra)
# Set the levels in order
p1 <- ggplot(data=fatal_events,
aes(x=reorder(EVTYPE, fatalities), y=fatalities, fill=fatalities)) +
geom_bar(stat="identity") +
coord_flip() +
ylab("Total number of fatalities") +
xlab("Event type") +
theme(legend.position="none")
p2 <- ggplot(data=injury_events,
aes(x=reorder(EVTYPE, injuries), y=injuries, fill=injuries)) +
geom_bar(stat="identity") +
coord_flip() +
ylab("Total number of injuries") +
xlab("Event type") +
theme(legend.position="none")
p1
p2
p1
grid.arrange(p1, p2, main="Top deadly weather events in the US (1950-2011)")
grid.arrange(p1, p2)
grid.arrange(p1, p2, top="Top deadly weather events in the US (1950-2011)")
#Using ggplot library
library(ggplot2)
trainData <- read.csv("./data/train.csv")
#####Checking the data first
#summary(trainData)
#str(trainData)
##Check to see if any NAs
#sum(is.na(trainData$Pclass)) #nop
#sum(is.na(trainData$Sex)) #nop
#sum(is.na(trainData$Age)) #Yes: 177!
#Collection of plots
g <- ggplot(trainData, aes(Age, Pclass))
p11 <- g + geom_point(aes(color=Sex))
p12 <- g + geom_point(aes(color=Sex)) + labs(title="Titanic intro Exploratory Analysis") + labs(x="Age of Passenger", y="Passenger Class on boat(1-3)")
p21 <- g + geom_point(aes(color=Sex)) + facet_grid(Survived ~.)
p22 <- g + geom_point(aes(color=Sex)) + facet_grid(Survived ~.) + labs(title="Titanic intro Exploratory Analysis") + labs(x="Age of Passenger", y="Passenger Class on boat(1-3)")
##To save the Plot 11:
png(filename='./figures/Plot11.png',
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white")
p11
#Close device connection
dev.off()
##To save the Plot 12:
png(filename='./figures/Plot12.png',
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white")
p12
#Close device connection
dev.off()
##To save the Plot 21:
png(filename='./figures/Plot21.png',
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white")
p21
#Close device connection
dev.off()
##To save the Plot 22:
png(filename='./figures/Plot22.png',
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white")
p22
#Close device connection
dev.off()
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
instal.packages("shiny")
install.packages("shiny")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
getwd
getwd()
setwd(D:\\Coursera\\Developing Data Products)
setwd("D:\\Coursera\\Developing Data Products")
runApp()
runApp()
runApp()
shinyUI(pageWithSidebar(
headerPanel("Illustrating markup"),
sidebarPanel(
h1('Sidebar panel'),
h1('H1 text'),
h2('H2 Text'),
h3('H3 Text'),
h4('H4 Text')
),
mainPanel(
h3('Main Panel text'),
code('some code'),
p('some ordinary text')
)
))
runApp()
runApp()
runApp()
setwd("D:\\Coursera\\Developing Data Products\\Course Project")
runApp()
runApp()
getwd()
setwd("D:\\Coursera\\Developing Data Products\\Course Project\\titanicShinyApp-master")
runApp()
setwd("D:\\Coursera\\Developing Data Products\\Course Project")
runApp()
getwd()
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
library(shinyapps)
shinyapps::deployApp('"D:\\Coursera\\Developing Data Products\\Course Project"')
library(shinyapps)
shinyapps::deployApp('D:\\Coursera\\Developing Data Products\\Course Project')
runApp()
shinyapps::setAccountInfo(name='hassanelahi',
token='3267C9279BC2F6C49688775D79BEF707',
secret='<SECRET>')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='hassanelahi',
token='3267C9279BC2F6C49688775D79BEF707',
secret='<SECRET>')
shinyapps::setAccountInfo(name='hassanelahi',
token='3267C9279BC2F6C49688775D79BEF707',
secret='<SECRET>')
Sys.setlocale(locale="en_US.UTF-8")
shinyapps::setAccountInfo(name='hassanelahi',
token='3267C9279BC2F6C49688775D79BEF707',
secret='<SECRET>')
Sys.setlocale(locale="English")
shinyapps::setAccountInfo(name='hassanelahi',
token='3267C9279BC2F6C49688775D79BEF707',
secret='<SECRET>')
shinyapps::setAccountInfo(name='hassanelahi',
token='3267C9279BC2F6C49688775D79BEF707',
secret='<SECRET>')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='hassanelahi',
token='3267C9279BC2F6C49688775D79BEF707',
secret='<SECRET>')
setAccountInfo(name='hassanelahi',
token='3267C9279BC2F6C49688775D79BEF707',
secret='<SECRET>')
shinyapps::setAccountInfo(name='hassanelahi',
token='3267C9279BC2F6C49688775D79BEF707',
secret='<SECRET>')
